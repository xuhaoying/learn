将值为从1到n*n的乱序N阶矩阵，n可能会很大, 把这个矩阵按1到n*n排序。
要求移动方式为，行或列上下左右移动。
比如第一行向左移动标记为1L，第二行向右移动标记为2R, 第三列向上移动标记为3U，第四列向下移动标记为4D。
要求返回移动方式，如1L, 2D...
其中矩阵是完全填充状态，没有空值。
矩阵可以用numpy来表示，代码记得加上注释。
如果代码超出长度，可以分批发送出来，每个函数单独发送一条消息。
怎么样移动，能最高效的完成矩阵排序，且移动步数最少？
请用python代码实现.
可以使用A搜索算法来解决这个问题。


通过A*搜索算法来解决这个问题。以下是一个大致的思路：

定义状态：将矩阵表示成一个状态，每个状态包含矩阵和移动步骤。
定义目标状态：排序后的矩阵。
定义启发式函数：可以使用曼哈顿距离或者哈密顿路径作为启发式函数，评估当前状态与目标状态的距离。
定义移动操作：对于每个状态，可以将空格从一个位置移动到另一个位置，产生新的状态。
使用优先队列维护待处理状态：优先处理距离目标状态更近的状态。
反复进行以下步骤，直到达到目标状态：
a. 从队列中取出距离目标状态最近的状态。
b. 执行移动操作，产生新的状态。
c. 对于新的状态，计算启发式函数，将其加入优先队列中。

https://www.redblobgames.com/pathfinding/a-star/introduction.html

假设矩阵的大小为3x3，矩阵值为1-9，如下所示：
[[8, 4, 2],
[3, 9, 5],
[1, 7, 6]]
我们的目标是将这个矩阵排序为：
[[1, 2, 3],
[4, 5, 6],
[7, 8, 9]]
在移动的过程中，我们需要记录每一步的移动方向，可以用字符串来表示，比如"L"表示左移，"R"表示右移，"U"表示上移，"D"表示下移。
我们的目标是找到一个移动方案，使得移动步数最少.